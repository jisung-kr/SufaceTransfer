//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosW;                   // Offset:  384 Size:    12
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16
//   float4 gFogColor;                  // Offset:  448 Size:    16 [unused]
//   float gFogStart;                   // Offset:  464 Size:     4 [unused]
//   float gFogRange;                   // Offset:  468 Size:     4 [unused]
//   float2 cbPerObjectPad2;            // Offset:  472 Size:     8 [unused]
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  480
//       float FalloffStart;            // Offset:  492
//       float3 Direction;              // Offset:  496
//       float FalloffEnd;              // Offset:  508
//       float3 Position;               // Offset:  512
//       float SpotPower;               // Offset:  524
//
//   } gLights[16];                     // Offset:  480 Size:   768
//
// }
//
// Resource bind info for gMaterialData
// {
//
//   struct MaterialData
//   {
//       
//       float4 DiffuseAlbedo;          // Offset:    0
//       float3 FresnelR0;              // Offset:   16
//       float Roughness;               // Offset:   28
//       float4x4 MatTransform;         // Offset:   32
//       uint DiffuseMapIndex;          // Offset:   96
//       uint NormalMapIndex;           // Offset:  100
//       uint SpecularMapIndex;         // Offset:  104
//       uint MatPad2;                  // Offset:  108
//
//   } $Element;                        // Offset:    0 Size:   112
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gsamLinearWrap                    sampler      NA          NA      S0             s2      1 
// gsamAnisotropicWrap               sampler      NA          NA      S1             s4      1 
// gCubeMap                          texture  float4        cube      T0             t0      1 
// gTextureMaps                      texture  float4          2d      T1             t1     20 
// gMaterialData                     texture  struct         r/o      T2      t1,space1      1 
// cbPass                            cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xy          4     NONE   float   xy  
// MATINDEX                 0   x           5     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[0:0][33], immediateIndexed, space=0
dcl_sampler S0[2:2], mode_default, space=0
dcl_sampler S1[4:4], mode_default, space=0
dcl_resource_texturecube (float,float,float,float) T0[0:0], space=0
dcl_resource_texture2d (float,float,float,float) T1[1:20], space=0
dcl_resource_structured T2[1:1], 112, space=1
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps constant v5.x
dcl_output o0.xyzw
dcl_temps 12
dcl_indexableTemp x0[5], 4
//
// Initial variable locations:
//   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
//   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
//   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
//   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
//   v4.x <- pin.TexC.x; v4.y <- pin.TexC.y; 
//   v5.x <- pin.MatIndex; 
//   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
//
#line 112 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\Default.hlsl"
ld_structured r0.x, v5.x, l(0), T2[1].xxxx  // r0.x <- matData.DiffuseAlbedo.x
ld_structured r0.y, v5.x, l(4), T2[1].xxxx  // r0.y <- matData.DiffuseAlbedo.y
ld_structured r0.z, v5.x, l(8), T2[1].xxxx  // r0.z <- matData.DiffuseAlbedo.z
ld_structured r0.w, v5.x, l(12), T2[1].xxxx  // r0.w <- matData.DiffuseAlbedo.w
ld_structured r1.x, v5.x, l(16), T2[1].xxxx  // r1.x <- matData.FresnelR0.x
ld_structured r1.y, v5.x, l(20), T2[1].xxxx  // r1.y <- matData.FresnelR0.y
ld_structured r1.z, v5.x, l(24), T2[1].xxxx  // r1.z <- matData.FresnelR0.z
ld_structured r2.x, v5.x, l(28), T2[1].xxxx  // r2.x <- matData.Roughness
ld_structured r2.y, v5.x, l(96), T2[1].xxxx  // r2.y <- matData.DiffuseMapIndex
ld_structured r2.z, v5.x, l(100), T2[1].xxxx  // r2.z <- matData.NormalMapIndex
ld_structured r2.w, v5.x, l(104), T2[1].xxxx  // r2.w <- matData.SpecularMapIndex

#line 113
mov r0.xyzw, r0.xyzw  // r0.x <- diffuseAlbedo.x; r0.y <- diffuseAlbedo.y; r0.z <- diffuseAlbedo.z; r0.w <- diffuseAlbedo.w

#line 114
mov r1.xyz, r1.xyzx  // r1.x <- fresnelR0.x; r1.y <- fresnelR0.y; r1.z <- fresnelR0.z

#line 115
mov r2.x, r2.x  // r2.x <- roughness

#line 117
mov r2.y, r2.y  // r2.y <- diffuseTexIndex

#line 118
mov r2.z, r2.z  // r2.z <- normalMapIndex

#line 119
mov r2.w, r2.w  // r2.w <- specularMapIndex

#line 122
sample r3.xyzw, v4.xyxx, T1[r2.y + 1].xyzw, S1[4]
mul r0.xyzw, r0.xyzw, r3.xyzw

#line 125
dp3 r2.y, v2.xyzx, v2.xyzx
rsq r2.y, r2.y
mul r3.xyz, r2.yyyy, v2.xyzx  // r3.x <- pin.NormalW.x; r3.y <- pin.NormalW.y; r3.z <- pin.NormalW.z

#line 127
sample r4.xyzw, v4.xyxx, T1[r2.z + 1].xyzw, S1[4]  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z; r4.w <- normalMapSample.w

#line 128
nop 
mov r4.xyz, r4.xyzx
mov r5.xyz, r3.xyzx
mov r6.xyz, v3.yzxy

#line 38
mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r7.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r4.xyz, r4.xyzx, r7.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z

#line 41
mov r5.xyz, r5.xyzx  // r5.x <- N.x; r5.y <- N.y; r5.z <- N.z

#line 42
dp3 r2.y, r6.zxyz, r5.xyzx
mul r7.xyz, r5.yzxy, r2.yyyy
mov r7.xyz, -r7.xyzx
add r6.xyz, r6.xyzx, r7.xyzx
dp3 r2.y, r6.xyzx, r6.xyzx
rsq r2.y, r2.y
mul r6.xyz, r2.yyyy, r6.xyzx  // r6.x <- T.y; r6.y <- T.z; r6.z <- T.x

#line 43
mul r7.xyz, r5.yzxy, r6.yzxy
mul r8.xyz, r5.zxyz, r6.xyzx
mov r8.xyz, -r8.xyzx
add r7.xyz, r7.xyzx, r8.xyzx  // r7.x <- B.x; r7.y <- B.y; r7.z <- B.z

#line 45
mov r8.x, r6.z  // r8.x <- TBN._m00
mov r8.y, r7.x  // r8.y <- TBN._m10
mov r8.z, r5.x  // r8.z <- TBN._m20
mov r9.x, r6.x  // r9.x <- TBN._m01
mov r9.y, r7.y  // r9.y <- TBN._m11
mov r9.z, r5.y  // r9.z <- TBN._m21
mov r5.x, r6.y  // r5.x <- TBN._m02
mov r5.y, r7.z  // r5.y <- TBN._m12
mov r5.z, r5.z  // r5.z <- TBN._m22

#line 48
dp3 r6.x, r4.xyzx, r8.xyzx  // r6.x <- bumpedNormalW.x
dp3 r6.y, r4.xyzx, r9.xyzx  // r6.y <- bumpedNormalW.y
dp3 r6.z, r4.xyzx, r5.xyzx  // r6.z <- bumpedNormalW.z

#line 50
mov r6.xyz, r6.xyzx  // r6.x <- <NormalSampleToWorldSpace return value>.x; r6.y <- <NormalSampleToWorldSpace return value>.y; r6.z <- <NormalSampleToWorldSpace return value>.z

#line 128
mov r6.xyz, r6.xyzx  // r6.x <- bumpedNormalW.x; r6.y <- bumpedNormalW.y; r6.z <- bumpedNormalW.z

#line 131
ieq r2.y, r2.z, l(-1)
if_nz r2.y

#line 132
  mov r6.xyz, r3.xyzx

#line 133
endif 

#line 136
mov r3.xyz, -v1.xyzx
add r3.xyz, r3.xyzx, CB0[0][24].xyzx  // r3.x <- toEyeW.x; r3.y <- toEyeW.y; r3.z <- toEyeW.z

#line 137
dp3 r2.y, r3.xyzx, r3.xyzx
sqrt r2.y, r2.y  // r2.y <- distToEye

#line 138
div r3.xyz, r3.xyzx, r2.yyyy

#line 142
mul r4.xyz, r0.xyzx, CB0[0][27].xyzx  // r4.x <- ambient.x; r4.y <- ambient.y; r4.z <- ambient.z

#line 144
mov r2.x, -r2.x
add r2.x, r2.x, l(1.000000)
mul r1.w, r4.w, r2.x  // r1.w <- shininess

#line 148
mov r1.xyz, r1.xyzx  // r1.x <- mat.FresnelR0.x; r1.y <- mat.FresnelR0.y; r1.z <- mat.FresnelR0.z
mov r1.w, r1.w  // r1.w <- mat.Shininess
mov r0.xyz, r0.xyzx  // r0.x <- mat.DiffuseAlbedo.x; r0.y <- mat.DiffuseAlbedo.y; r0.z <- mat.DiffuseAlbedo.z

#line 150
nop 
mov x0[0].xyz, CB0[0][30].xyzx
mov x0[1].x, CB0[0][30].w
mov x0[3].x, CB0[0][31].w
mov x0[4].xyz, CB0[0][32].xyzx
mov r5.xyzw, r1.xyzw
mov r0.xyz, r0.xyzx
mov r2.xyz, v1.xyzx
mov r6.xyz, r6.xyzx
mov r3.xyz, r3.xyzx

#line 142 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\LightingUtil.hlsl"
mov r7.xyz, l(0,0,0,0)  // r7.x <- result.x; r7.y <- result.y; r7.z <- result.z

#line 156
nop 
mov r8.xyz, x0[0].xyzx
mov r3.w, x0[1].x
mov r4.w, x0[3].x
mov r9.xyz, x0[4].xyzx
mov r5.xyzw, r5.xyzw
mov r0.xyz, r0.xyzx
mov r2.xyz, r2.xyzx
mov r10.xyz, r6.xyzx
mov r11.xyz, r3.xyzx

#line 82
mov r2.xyz, -r2.xyzx
add r2.xyz, r2.xyzx, r9.xyzx  // r2.x <- lightVec.x; r2.y <- lightVec.y; r2.z <- lightVec.z

#line 85
dp3 r6.w, r2.xyzx, r2.xyzx
sqrt r6.w, r6.w  // r6.w <- d

#line 88
lt r7.w, r4.w, r6.w
if_nz r7.w

#line 89
  mov r9.xyz, l(0,0,0,0)
endif   // r9.x <- <ComputePointLight return value>.x; r9.y <- <ComputePointLight return value>.y; r9.z <- <ComputePointLight return value>.z

#line 92
if_z r7.w
  div r2.xyz, r2.xyzx, r6.wwww

#line 95
  dp3 r7.w, r2.xyzx, r10.xyzx
  max r7.w, r7.w, l(0.000000)  // r7.w <- ndotl

#line 96
  mul r8.xyz, r7.wwww, r8.xyzx  // r8.x <- lightStrength.x; r8.y <- lightStrength.y; r8.z <- lightStrength.z

#line 99
  nop 
  mov r6.w, r6.w
  mov r3.w, r3.w
  mov r4.w, r4.w

#line 29
  mov r6.w, -r6.w
  add r6.w, r4.w, r6.w
  mov r3.w, -r3.w
  add r3.w, r3.w, r4.w
  div r3.w, r6.w, r3.w
  max r3.w, r3.w, l(0.000000)
  min r3.w, r3.w, l(1.000000)  // r3.w <- <CalcAttenuation return value>

#line 99
  mov r3.w, r3.w  // r3.w <- att

#line 100
  mul r8.xyz, r3.wwww, r8.xyzx

#line 102
  nop 
  mov r8.xyz, r8.xyzx
  mov r2.xyz, r2.xyzx
  mov r10.xyz, r10.xyzx
  mov r11.xyz, r11.xyzx
  mov r0.xyz, r0.xyzx
  mov r5.xyzw, r5.xyzw

#line 46
  mul r3.w, r5.w, l(256.000000)  // r3.w <- m

#line 47
  add r11.xyz, r2.xyzx, r11.xyzx
  dp3 r4.w, r11.xyzx, r11.xyzx
  rsq r4.w, r4.w
  mul r11.xyz, r4.wwww, r11.xyzx  // r11.x <- halfVec.x; r11.y <- halfVec.y; r11.z <- halfVec.z

#line 49
  add r4.w, r3.w, l(8.000000)
  dp3 r5.w, r11.xyzx, r10.xyzx
  max r5.w, r5.w, l(0.000000)
  log r5.w, r5.w
  mul r3.w, r3.w, r5.w
  exp r3.w, r3.w
  mul r3.w, r3.w, r4.w
  div r3.w, r3.w, l(8.000000)  // r3.w <- roughnessFactor

#line 50
  nop 
  mov r5.xyz, r5.xyzx
  mov r11.xyz, r11.xyzx
  mov r2.xyz, r2.xyzx

#line 36
  dp3 r2.x, r11.xyzx, r2.xyzx
  max r2.x, r2.x, l(0.000000)
  min r2.x, r2.x, l(1.000000)  // r2.x <- cosIncidentAngle

#line 38
  mov r2.x, -r2.x
  add r2.x, r2.x, l(1.000000)  // r2.x <- f0

#line 39
  mov r10.xyz, -r5.xyzx
  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.y, r2.x, r2.x
  mul r2.y, r2.x, r2.y
  mul r2.y, r2.x, r2.y
  mul r2.x, r2.x, r2.y
  mul r2.xyz, r2.xxxx, r10.xyzx
  add r2.xyz, r2.xyzx, r5.xyzx  // r2.x <- reflectPercent.x; r2.y <- reflectPercent.y; r2.z <- reflectPercent.z

#line 41
  mov r2.xyz, r2.xyzx  // r2.x <- <SchlickFresnel return value>.x; r2.y <- <SchlickFresnel return value>.y; r2.z <- <SchlickFresnel return value>.z

#line 50
  mov r2.xyz, r2.xyzx  // r2.x <- fresnelFactor.x; r2.y <- fresnelFactor.y; r2.z <- fresnelFactor.z

#line 52
  mul r2.xyz, r3.wwww, r2.xyzx  // r2.x <- specAlbedo.x; r2.y <- specAlbedo.y; r2.z <- specAlbedo.z

#line 56
  add r5.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  div r2.xyz, r2.xyzx, r5.xyzx

#line 58
  add r0.xyz, r0.xyzx, r2.xyzx
  mul r9.xyz, r8.xyzx, r0.xyzx  // r9.x <- <BlinnPhong return value>.x; r9.y <- <BlinnPhong return value>.y; r9.z <- <BlinnPhong return value>.z

#line 102
  mov r9.xyz, r9.xyzx  // r9.x <- <ComputePointLight return value>.x; r9.y <- <ComputePointLight return value>.y; r9.z <- <ComputePointLight return value>.z
endif 

#line 156
add r0.xyz, r7.xyzx, r9.xyzx  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z

#line 167
mov r0.xyz, r0.xyzx  // r0.x <- <ComputeLighting return value>.x; r0.y <- <ComputeLighting return value>.y; r0.z <- <ComputeLighting return value>.z

#line 150 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\Default.hlsl"
mov r0.xyz, r0.xyzx  // r0.x <- directLight.x; r0.y <- directLight.y; r0.z <- directLight.z

#line 152
add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z

#line 156
mov r2.xyz, -r3.xyzx
dp3 r3.w, r2.xyzx, r6.xyzx
add r3.w, r3.w, r3.w
mov r3.w, -r3.w
mul r4.xyz, r3.wwww, r6.xyzx
add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- r.x; r2.y <- r.y; r2.z <- r.z

#line 157
sample r4.xyz, r2.xyzx, T0[0].xyzw, S0[2]
mov r4.xyz, r4.xyzx  // r4.x <- reflectionColor.x; r4.y <- reflectionColor.y; r4.z <- reflectionColor.z

#line 158
nop 
mov r1.xyz, r1.xyzx
mov r6.xyz, r6.xyzx
mov r2.xyz, r2.xyzx

#line 36 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\LightingUtil.hlsl"
dp3 r3.w, r6.xyzx, r2.xyzx
max r3.w, r3.w, l(0.000000)
min r3.w, r3.w, l(1.000000)  // r3.w <- cosIncidentAngle

#line 38
mov r3.w, -r3.w
add r3.w, r3.w, l(1.000000)  // r3.w <- f0

#line 39
mov r5.xyz, -r1.xyzx
add r5.xyz, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.w, r3.w, r3.w
mul r4.w, r3.w, r4.w
mul r4.w, r3.w, r4.w
mul r3.w, r3.w, r4.w
mul r5.xyz, r3.wwww, r5.xyzx
add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- reflectPercent.x; r1.y <- reflectPercent.y; r1.z <- reflectPercent.z

#line 41
mov r1.xyz, r1.xyzx  // r1.x <- <SchlickFresnel return value>.x; r1.y <- <SchlickFresnel return value>.y; r1.z <- <SchlickFresnel return value>.z

#line 158 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\Default.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- fresnelFactor.x; r1.y <- fresnelFactor.y; r1.z <- fresnelFactor.z

#line 161
ine r3.w, r2.w, l(-1)
if_nz r3.w

#line 163
  sample r5.xyz, v4.xyxx, T1[r2.w + 1].xyzw, S1[4]  // r5.x <- specularIntensity.x; r5.y <- specularIntensity.y; r5.z <- specularIntensity.z

#line 166
  dp3 r2.x, r2.xyzx, r3.xyzx
  max r2.x, r2.x, l(0.000000)
  min r2.x, r2.x, l(1.000000)
  mov r2.y, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.xyz, r2.xxxx, r2.yyyy  // r2.x <- specular.x; r2.y <- specular.y; r2.z <- specular.z

#line 169
  mul r2.xyz, r5.xyzx, r2.xyzx

#line 171
  add r0.xyz, r0.xyzx, r2.xyzx

#line 172
endif 

#line 174
mul r1.xyz, r1.xyzx, r1.wwww
mul r1.xyz, r4.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, r1.xyzx

#line 182
mov r0.w, r0.w  // r0.w <- litColor.w

#line 186
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 215 instruction slots used
