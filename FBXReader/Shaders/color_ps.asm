//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosW;                   // Offset:  384 Size:    12
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  448
//       float FalloffStart;            // Offset:  460
//       float3 Direction;              // Offset:  464
//       float FalloffEnd;              // Offset:  476
//       float3 Position;               // Offset:  480
//       float SpotPower;               // Offset:  492
//
//   } gLights[16];                     // Offset:  448 Size:   768
//
// }
//
// Resource bind info for gMaterialData
// {
//
//   struct MaterialData
//   {
//       
//       float4 DiffuseAlbedo;          // Offset:    0
//       float3 FresnelR0;              // Offset:   16
//       float Roughness;               // Offset:   28
//       float4x4 MatTransform;         // Offset:   32
//       uint DiffuseMapIndex;          // Offset:   96
//       uint NormalMapIndex;           // Offset:  100
//       uint SpecularMapIndex;         // Offset:  104
//       uint MatPad2;                  // Offset:  108
//
//   } $Element;                        // Offset:    0 Size:   112
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gsamLinearWrap                    sampler      NA          NA      S0             s2      1 
// gsamAnisotropicWrap               sampler      NA          NA      S1             s4      1 
// gCubeMap                          texture  float4        cube      T0             t0      1 
// gTextureMaps                      texture  float4          2d      T1             t1     16 
// gMaterialData                     texture  struct         r/o      T2      t1,space1      1 
// cbPass                            cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xy          4     NONE   float   xy  
// MATINDEX                 0   x           5     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[0:0][39], immediateIndexed, space=0
dcl_sampler S0[2:2], mode_default, space=0
dcl_sampler S1[4:4], mode_default, space=0
dcl_resource_texturecube (float,float,float,float) T0[0:0], space=0
dcl_resource_texture2d (float,float,float,float) T1[1:16], space=0
dcl_resource_structured T2[1:1], 112, space=1
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps constant v5.x
dcl_output o0.xyzw
dcl_temps 14
dcl_indexableTemp x0[21], 4
//
// Initial variable locations:
//   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
//   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
//   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
//   v3.x <- pin.TangentW.x; v3.y <- pin.TangentW.y; v3.z <- pin.TangentW.z; 
//   v4.x <- pin.TexC.x; v4.y <- pin.TexC.y; 
//   v5.x <- pin.MatIndex; 
//   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
//
#line 185 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\Default.hlsl"
ld_structured r0.x, v5.x, l(0), T2[1].xxxx  // r0.x <- matData.DiffuseAlbedo.x
ld_structured r0.y, v5.x, l(4), T2[1].xxxx  // r0.y <- matData.DiffuseAlbedo.y
ld_structured r0.z, v5.x, l(8), T2[1].xxxx  // r0.z <- matData.DiffuseAlbedo.z
ld_structured r0.w, v5.x, l(12), T2[1].xxxx  // r0.w <- matData.DiffuseAlbedo.w
ld_structured r1.x, v5.x, l(16), T2[1].xxxx  // r1.x <- matData.FresnelR0.x
ld_structured r1.y, v5.x, l(20), T2[1].xxxx  // r1.y <- matData.FresnelR0.y
ld_structured r1.z, v5.x, l(24), T2[1].xxxx  // r1.z <- matData.FresnelR0.z
ld_structured r1.w, v5.x, l(28), T2[1].xxxx  // r1.w <- matData.Roughness
ld_structured r2.x, v5.x, l(96), T2[1].xxxx  // r2.x <- matData.DiffuseMapIndex
ld_structured r2.y, v5.x, l(100), T2[1].xxxx  // r2.y <- matData.NormalMapIndex

#line 186
mov r0.xyzw, r0.xyzw  // r0.x <- diffuseAlbedo.x; r0.y <- diffuseAlbedo.y; r0.z <- diffuseAlbedo.z; r0.w <- diffuseAlbedo.w

#line 187
mov r1.xyz, r1.xyzx  // r1.x <- fresnelR0.x; r1.y <- fresnelR0.y; r1.z <- fresnelR0.z

#line 188
mov r1.w, r1.w  // r1.w <- roughness

#line 189
mov r2.x, r2.x  // r2.x <- diffuseMapIndex

#line 190
mov r2.y, r2.y  // r2.y <- normalMapIndex

#line 193
dp3 r2.z, v2.xyzx, v2.xyzx
rsq r2.z, r2.z
mul r3.xyz, r2.zzzz, v2.xyzx  // r3.x <- pin.NormalW.x; r3.y <- pin.NormalW.y; r3.z <- pin.NormalW.z

#line 195
sample r4.xyzw, v4.xyxx, T1[r2.y + 1].xyzw, S1[4]  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z; r4.w <- normalMapSample.w

#line 196
nop 
mov r4.xyz, r4.xyzx
mov r3.xyz, r3.xyzx
mov r2.yzw, v3.yyzx

#line 38
mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
add r4.xyz, r4.xyzx, r5.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z

#line 41
mov r3.xyz, r3.xyzx  // r3.x <- N.x; r3.y <- N.y; r3.z <- N.z

#line 42
dp3 r3.w, r2.wyzw, r3.xyzx
mul r5.xyz, r3.yzxy, r3.wwww
mov r5.xyz, -r5.xyzx
add r2.yzw, r2.yyzw, r5.xxyz
dp3 r3.w, r2.yzwy, r2.yzwy
rsq r3.w, r3.w
mul r2.yzw, r2.yyzw, r3.wwww  // r2.y <- T.y; r2.z <- T.z; r2.w <- T.x

#line 43
mul r5.xyz, r2.zwyz, r3.yzxy
mul r6.xyz, r2.yzwy, r3.zxyz
mov r6.xyz, -r6.xyzx
add r5.xyz, r5.xyzx, r6.xyzx  // r5.x <- B.x; r5.y <- B.y; r5.z <- B.z

#line 45
mov r6.x, r2.w  // r6.x <- TBN._m00
mov r6.y, r5.x  // r6.y <- TBN._m10
mov r6.z, r3.x  // r6.z <- TBN._m20
mov r7.x, r2.y  // r7.x <- TBN._m01
mov r7.y, r5.y  // r7.y <- TBN._m11
mov r7.z, r3.y  // r7.z <- TBN._m21
mov r3.x, r2.z  // r3.x <- TBN._m02
mov r3.y, r5.z  // r3.y <- TBN._m12
mov r3.z, r3.z  // r3.z <- TBN._m22

#line 48
dp3 r5.x, r4.xyzx, r6.xyzx  // r5.x <- bumpedNormalW.x
dp3 r5.y, r4.xyzx, r7.xyzx  // r5.y <- bumpedNormalW.y
dp3 r5.z, r4.xyzx, r3.xyzx  // r5.z <- bumpedNormalW.z

#line 50
mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z

#line 196
mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z

#line 202
sample r2.xyzw, v4.xyxx, T1[r2.x + 1].xyzw, S1[4]
mul r0.xyzw, r0.xyzw, r2.xyzw

#line 205
mov r2.xyz, -v1.xyzx
add r2.xyz, r2.xyzx, CB0[0][24].xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx  // r2.x <- toEyeW.x; r2.y <- toEyeW.y; r2.z <- toEyeW.z

#line 208
mul r3.xyz, r0.xyzx, CB0[0][27].xyzx  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z

#line 210
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)
mul r4.w, r4.w, r1.w  // r4.w <- shininess

#line 211
mov r6.xyz, r0.xyzx  // r6.x <- mat.DiffuseAlbedo.x; r6.y <- mat.DiffuseAlbedo.y; r6.z <- mat.DiffuseAlbedo.z
mov r6.w, r1.x  // r6.w <- mat.FresnelR0.x
mov r4.yz, r1.yyzy  // r4.y <- mat.FresnelR0.y; r4.z <- mat.FresnelR0.z
mov r4.w, r4.w  // r4.w <- mat.Shininess

#line 213
nop 
mov x0[0].xyz, CB0[0][28].xyzx
mov x0[2].xyz, CB0[0][29].xyzx
mov x0[4].xyz, CB0[0][30].xyzx
mov x0[6].xyz, CB0[0][31].xyzx
mov x0[8].xyz, CB0[0][32].xyzx
mov x0[10].xyz, CB0[0][33].xyzx
mov x0[12].xyz, CB0[0][34].xyzx
mov x0[14].xyz, CB0[0][35].xyzx
mov x0[16].xyz, CB0[0][36].xyzx
mov x0[18].xyz, CB0[0][37].xyzx
mov x0[20].xyz, CB0[0][38].xyzx
mov r6.xyzw, r6.xyzw
mov r4.yzw, r4.yyzw
mov r5.xyz, r5.xyzx
mov r2.xyz, r2.xyzx

#line 142 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\LightingUtil.hlsl"
mov r0.xyz, l(0,0,0,0)  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z

#line 147
mov r1.w, l(0)  // r1.w <- i
mov r7.xyz, r0.xyzx  // r7.x <- result.x; r7.y <- result.y; r7.z <- result.z
mov r2.w, r1.w  // r2.w <- i
loop 
  ilt r3.w, r2.w, l(3)
  breakc_z r3.w

#line 149
  mov r3.w, l(1.000000)  // r3.w <- shadowFactor.x
  nop 
  imul null, r4.x, r2.w, l(6)
  mov r8.xyz, x0[r4.x + 0].xyzx
  mov r9.xyz, x0[r4.x + 2].xyzx
  mov r10.x, r6.w
  mov r10.yzw, r4.yyzw
  mov r11.xyz, r6.xyzx
  mov r12.xyz, r5.xyzx
  mov r13.xyz, r2.xyzx

#line 67
  mov r9.xyz, -r9.xyzx  // r9.x <- lightVec.x; r9.y <- lightVec.y; r9.z <- lightVec.z

#line 70
  dp3 r4.x, r9.xyzx, r12.xyzx
  max r4.x, r4.x, l(0.000000)  // r4.x <- ndotl

#line 71
  mul r8.xyz, r4.xxxx, r8.xyzx  // r8.x <- lightStrength.x; r8.y <- lightStrength.y; r8.z <- lightStrength.z

#line 73
  nop 
  mov r8.xyz, r8.xyzx
  mov r9.xyz, r9.xyzx
  mov r12.xyz, r12.xyzx
  mov r13.xyz, r13.xyzx
  mov r11.xyz, r11.xyzx
  mov r10.xyzw, r10.xyzw

#line 46
  mul r4.x, r10.w, l(256.000000)  // r4.x <- m

#line 47
  add r13.xyz, r9.xyzx, r13.xyzx
  dp3 r5.w, r13.xyzx, r13.xyzx
  rsq r5.w, r5.w
  mul r13.xyz, r5.wwww, r13.xyzx  // r13.x <- halfVec.x; r13.y <- halfVec.y; r13.z <- halfVec.z

#line 49
  add r5.w, r4.x, l(8.000000)
  dp3 r7.w, r13.xyzx, r12.xyzx
  max r7.w, r7.w, l(0.000000)
  log r7.w, r7.w
  mul r4.x, r4.x, r7.w
  exp r4.x, r4.x
  mul r4.x, r4.x, r5.w
  div r4.x, r4.x, l(8.000000)  // r4.x <- roughnessFactor

#line 50
  nop 
  mov r10.xyz, r10.xyzx
  mov r13.xyz, r13.xyzx
  mov r9.xyz, r9.xyzx

#line 36
  dp3 r5.w, r13.xyzx, r9.xyzx
  max r5.w, r5.w, l(0.000000)
  min r5.w, r5.w, l(1.000000)  // r5.w <- cosIncidentAngle

#line 38
  mov r5.w, -r5.w
  add r5.w, r5.w, l(1.000000)  // r5.w <- f0

#line 39
  mov r9.xyz, -r10.xyzx
  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r7.w, r5.w, r5.w
  mul r7.w, r5.w, r7.w
  mul r7.w, r5.w, r7.w
  mul r5.w, r5.w, r7.w
  mul r9.xyz, r5.wwww, r9.xyzx
  add r9.xyz, r9.xyzx, r10.xyzx  // r9.x <- reflectPercent.x; r9.y <- reflectPercent.y; r9.z <- reflectPercent.z

#line 41
  mov r9.xyz, r9.xyzx  // r9.x <- <SchlickFresnel return value>.x; r9.y <- <SchlickFresnel return value>.y; r9.z <- <SchlickFresnel return value>.z

#line 50
  mov r9.xyz, r9.xyzx  // r9.x <- fresnelFactor.x; r9.y <- fresnelFactor.y; r9.z <- fresnelFactor.z

#line 52
  mul r9.xyz, r4.xxxx, r9.xyzx  // r9.x <- specAlbedo.x; r9.y <- specAlbedo.y; r9.z <- specAlbedo.z

#line 56
  add r10.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  div r9.xyz, r9.xyzx, r10.xyzx

#line 58
  add r9.xyz, r9.xyzx, r11.xyzx
  mul r8.xyz, r8.xyzx, r9.xyzx  // r8.x <- <BlinnPhong return value>.x; r8.y <- <BlinnPhong return value>.y; r8.z <- <BlinnPhong return value>.z

#line 73
  mov r8.xyz, r8.xyzx  // r8.x <- <ComputeDirectionalLight return value>.x; r8.y <- <ComputeDirectionalLight return value>.y; r8.z <- <ComputeDirectionalLight return value>.z

#line 149
  mul r8.xyz, r3.wwww, r8.xyzx
  add r7.xyz, r7.xyzx, r8.xyzx

#line 150
  iadd r2.w, r2.w, l(1)
endloop 

#line 167
mov r7.xyz, r7.xyzx  // r7.x <- <ComputeLighting return value>.x; r7.y <- <ComputeLighting return value>.y; r7.z <- <ComputeLighting return value>.z

#line 213 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\Default.hlsl"
mov r7.xyz, r7.xyzx  // r7.x <- directLight.x; r7.y <- directLight.y; r7.z <- directLight.z

#line 216
add r0.xyz, r3.xyzx, r7.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z

#line 219
mov r2.xyz, -r2.xyzx
dp3 r1.w, r2.xyzx, r5.xyzx
add r1.w, r1.w, r1.w
mov r1.w, -r1.w
mul r3.xyz, r1.wwww, r5.xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- r.x; r2.y <- r.y; r2.z <- r.z

#line 220
sample r3.xyz, r2.xyzx, T0[0].xyzw, S0[2]
mov r3.xyz, r3.xyzx  // r3.x <- reflectionColor.x; r3.y <- reflectionColor.y; r3.z <- reflectionColor.z

#line 221
nop 
mov r1.xyz, r1.xyzx
mov r5.xyz, r5.xyzx
mov r2.xyz, r2.xyzx

#line 36 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\LightingUtil.hlsl"
dp3 r1.w, r5.xyzx, r2.xyzx
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, l(1.000000)  // r1.w <- cosIncidentAngle

#line 38
mov r1.w, -r1.w
add r1.w, r1.w, l(1.000000)  // r1.w <- f0

#line 39
mov r2.xyz, -r1.xyzx
add r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.w, r1.w, r1.w
mul r2.w, r1.w, r2.w
mul r2.w, r1.w, r2.w
mul r1.w, r1.w, r2.w
mul r2.xyz, r1.wwww, r2.xyzx
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- reflectPercent.x; r1.y <- reflectPercent.y; r1.z <- reflectPercent.z

#line 41
mov r1.xyz, r1.xyzx  // r1.x <- <SchlickFresnel return value>.x; r1.y <- <SchlickFresnel return value>.y; r1.z <- <SchlickFresnel return value>.z

#line 221 "C:\Users\s-jis\source\repos\skfkwltjd\SufaceTransfer\FBXReader\Shaders\Default.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- fresnelFactor.x; r1.y <- fresnelFactor.y; r1.z <- fresnelFactor.z

#line 222
mul r1.xyz, r1.xyzx, r4.wwww
mul r1.xyz, r3.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, r1.xyzx

#line 225
mov r0.w, r0.w  // r0.w <- litColor.w

#line 227
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 190 instruction slots used
